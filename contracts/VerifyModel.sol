// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract Verifier {
    function verify(
        uint256[1] calldata pubInputs,
        bytes calldata proof
    ) public view returns (bool) {
        bool success = true;
        bytes32[845] memory transcript;
        assembly {                    let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47                    let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001                    function validate_ec_point(x, y) -> valid {                        {                            let x_lt_p := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let y_lt_p := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            valid := and(x_lt_p, y_lt_p)                        }                        {                            let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let is_affine := eq(x_cube_plus_3, y_square)                            valid := and(valid, is_affine)                        }                    }                    mstore(0xa0, mod(calldataload(0x4), f_q))mstore(0x80, 13222391029312171100172093572548119006765903609166452314272909900068341004823)        {            let x := calldataload(0x64)            mstore(0xc0, x)            let y := calldataload(0x84)            mstore(0xe0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0xa4)            mstore(0x100, x)            let y := calldataload(0xc4)            mstore(0x120, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0xe4)            mstore(0x140, x)            let y := calldataload(0x104)            mstore(0x160, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x180, keccak256(0x80, 256)){            let hash := mload(0x180)            mstore(0x1a0, mod(hash, f_q))            mstore(0x1c0, hash)        }        {            let x := calldataload(0x124)            mstore(0x1e0, x)            let y := calldataload(0x144)            mstore(0x200, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x164)            mstore(0x220, x)            let y := calldataload(0x184)            mstore(0x240, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x1a4)            mstore(0x260, x)            let y := calldataload(0x1c4)            mstore(0x280, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x1e4)            mstore(0x2a0, x)            let y := calldataload(0x204)            mstore(0x2c0, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x2e0, keccak256(0x1c0, 288)){            let hash := mload(0x2e0)            mstore(0x300, mod(hash, f_q))            mstore(0x320, hash)        }mstore8(0x340, 1)mstore(0x340, keccak256(0x320, 33)){            let hash := mload(0x340)            mstore(0x360, mod(hash, f_q))            mstore(0x380, hash)        }        {            let x := calldataload(0x224)            mstore(0x3a0, x)            let y := calldataload(0x244)            mstore(0x3c0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x264)            mstore(0x3e0, x)            let y := calldataload(0x284)            mstore(0x400, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x2a4)            mstore(0x420, x)            let y := calldataload(0x2c4)            mstore(0x440, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x2e4)            mstore(0x460, x)            let y := calldataload(0x304)            mstore(0x480, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x324)            mstore(0x4a0, x)            let y := calldataload(0x344)            mstore(0x4c0, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x4e0, keccak256(0x380, 352)){            let hash := mload(0x4e0)            mstore(0x500, mod(hash, f_q))            mstore(0x520, hash)        }        {            let x := calldataload(0x364)            mstore(0x540, x)            let y := calldataload(0x384)            mstore(0x560, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x3a4)            mstore(0x580, x)            let y := calldataload(0x3c4)            mstore(0x5a0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x3e4)            mstore(0x5c0, x)            let y := calldataload(0x404)            mstore(0x5e0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x424)            mstore(0x600, x)            let y := calldataload(0x444)            mstore(0x620, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x640, keccak256(0x520, 288)){            let hash := mload(0x640)            mstore(0x660, mod(hash, f_q))            mstore(0x680, hash)        }mstore(0x6a0, mod(calldataload(0x464), f_q))mstore(0x6c0, mod(calldataload(0x484), f_q))mstore(0x6e0, mod(calldataload(0x4a4), f_q))mstore(0x700, mod(calldataload(0x4c4), f_q))mstore(0x720, mod(calldataload(0x4e4), f_q))mstore(0x740, mod(calldataload(0x504), f_q))mstore(0x760, mod(calldataload(0x524), f_q))mstore(0x780, mod(calldataload(0x544), f_q))mstore(0x7a0, mod(calldataload(0x564), f_q))mstore(0x7c0, mod(calldataload(0x584), f_q))mstore(0x7e0, mod(calldataload(0x5a4), f_q))mstore(0x800, mod(calldataload(0x5c4), f_q))mstore(0x820, mod(calldataload(0x5e4), f_q))mstore(0x840, mod(calldataload(0x604), f_q))mstore(0x860, mod(calldataload(0x624), f_q))mstore(0x880, mod(calldataload(0x644), f_q))mstore(0x8a0, mod(calldataload(0x664), f_q))mstore(0x8c0, mod(calldataload(0x684), f_q))mstore(0x8e0, mod(calldataload(0x6a4), f_q))mstore(0x900, mod(calldataload(0x6c4), f_q))mstore(0x920, mod(calldataload(0x6e4), f_q))mstore(0x940, mod(calldataload(0x704), f_q))mstore(0x960, mod(calldataload(0x724), f_q))mstore(0x980, mod(calldataload(0x744), f_q))mstore(0x9a0, mod(calldataload(0x764), f_q))mstore(0x9c0, mod(calldataload(0x784), f_q))mstore(0x9e0, mod(calldataload(0x7a4), f_q))mstore(0xa00, mod(calldataload(0x7c4), f_q))mstore(0xa20, mod(calldataload(0x7e4), f_q))mstore(0xa40, mod(calldataload(0x804), f_q))mstore(0xa60, mod(calldataload(0x824), f_q))mstore(0xa80, mod(calldataload(0x844), f_q))mstore(0xaa0, mod(calldataload(0x864), f_q))mstore(0xac0, mod(calldataload(0x884), f_q))mstore(0xae0, mod(calldataload(0x8a4), f_q))mstore(0xb00, mod(calldataload(0x8c4), f_q))mstore(0xb20, keccak256(0x680, 1184)){            let hash := mload(0xb20)            mstore(0xb40, mod(hash, f_q))            mstore(0xb60, hash)        }        {            let x := calldataload(0x8e4)            mstore(0xb80, x)            let y := calldataload(0x904)            mstore(0xba0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x924)            mstore(0xbc0, x)            let y := calldataload(0x944)            mstore(0xbe0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x964)            mstore(0xc00, x)            let y := calldataload(0x984)            mstore(0xc20, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x9a4)            mstore(0xc40, x)            let y := calldataload(0x9c4)            mstore(0xc60, y)            success := and(validate_ec_point(x, y), success)        }mstore(0xc80, keccak256(0xb60, 288)){            let hash := mload(0xc80)            mstore(0xca0, mod(hash, f_q))            mstore(0xcc0, hash)        }mstore(0xce0, mulmod(mload(0x660), mload(0x660), f_q))mstore(0xd00, mulmod(mload(0xce0), mload(0xce0), f_q))mstore(0xd20, mulmod(mload(0xd00), mload(0xd00), f_q))mstore(0xd40, mulmod(mload(0xd20), mload(0xd20), f_q))mstore(0xd60, mulmod(mload(0xd40), mload(0xd40), f_q))mstore(0xd80, mulmod(mload(0xd60), mload(0xd60), f_q))mstore(0xda0, mulmod(mload(0xd80), mload(0xd80), f_q))mstore(0xdc0, mulmod(mload(0xda0), mload(0xda0), f_q))mstore(0xde0, mulmod(mload(0xdc0), mload(0xdc0), f_q))mstore(0xe00, mulmod(mload(0xde0), mload(0xde0), f_q))mstore(0xe20, mulmod(mload(0xe00), mload(0xe00), f_q))mstore(0xe40, mulmod(mload(0xe20), mload(0xe20), f_q))mstore(0xe60, mulmod(mload(0xe40), mload(0xe40), f_q))mstore(0xe80, mulmod(mload(0xe60), mload(0xe60), f_q))mstore(0xea0, mulmod(mload(0xe80), mload(0xe80), f_q))mstore(0xec0, mulmod(mload(0xea0), mload(0xea0), f_q))mstore(0xee0, mulmod(mload(0xec0), mload(0xec0), f_q))mstore(0xf00, addmod(mload(0xee0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(0xf20, mulmod(mload(0xf00), 21888075877798810139885396174900942254113179552665176677420557563313886988289, f_q))mstore(0xf40, mulmod(mload(0xf20), 18801136258871406524726641978934912926273987048785013233465874845411408769764, f_q))mstore(0xf60, addmod(mload(0x660), 3087106612967868697519763766322362162274377351631021110232329341164399725853, f_q))mstore(0xf80, mulmod(mload(0xf20), 13137266746974929847674828718073699700748973485900204084410541910719500618841, f_q))mstore(0xfa0, addmod(mload(0x660), 8750976124864345374571577027183575387799390914515830259287662275856307876776, f_q))mstore(0xfc0, mulmod(mload(0xf20), 14204982954615820785730815556166377574172276341958019443243371773666809943588, f_q))mstore(0xfe0, addmod(mload(0x660), 7683259917223454436515590189090897514376088058458014900454832412908998552029, f_q))mstore(0x1000, mulmod(mload(0xf20), 9798514389911400568976296423560720718971335345616984532185711118739339214189, f_q))mstore(0x1020, addmod(mload(0x660), 12089728481927874653270109321696554369577029054799049811512493067836469281428, f_q))mstore(0x1040, mulmod(mload(0xf20), 5857228514216831962358810454360739186987616060007133076514874820078026801648, f_q))mstore(0x1060, addmod(mload(0x660), 16031014357622443259887595290896535901560748340408901267183329366497781693969, f_q))mstore(0x1080, mulmod(mload(0xf20), 11402394834529375719535454173347509224290498423785625657829583372803806900475, f_q))mstore(0x10a0, addmod(mload(0x660), 10485848037309899502710951571909765864257865976630408685868620813772001595142, f_q))mstore(0x10c0, mulmod(mload(0xf20), 1, f_q))mstore(0x10e0, addmod(mload(0x660), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q)){            let prod := mload(0xf60)                prod := mulmod(mload(0xfa0), prod, f_q)                mstore(0x1100, prod)                            prod := mulmod(mload(0xfe0), prod, f_q)                mstore(0x1120, prod)                            prod := mulmod(mload(0x1020), prod, f_q)                mstore(0x1140, prod)                            prod := mulmod(mload(0x1060), prod, f_q)                mstore(0x1160, prod)                            prod := mulmod(mload(0x10a0), prod, f_q)                mstore(0x1180, prod)                            prod := mulmod(mload(0x10e0), prod, f_q)                mstore(0x11a0, prod)                            prod := mulmod(mload(0xf00), prod, f_q)                mstore(0x11c0, prod)                    }mstore(0x1200, 32)mstore(0x1220, 32)mstore(0x1240, 32)mstore(0x1260, mload(0x11c0))mstore(0x1280, 21888242871839275222246405745257275088548364400416034343698204186575808495615)mstore(0x12a0, 21888242871839275222246405745257275088548364400416034343698204186575808495617)success := and(eq(staticcall(gas(), 0x5, 0x1200, 0xc0, 0x11e0, 0x20), 1), success){                        let inv := mload(0x11e0)            let v                            v := mload(0xf00)                    mstore(0xf00, mulmod(mload(0x11a0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x10e0)                    mstore(0x10e0, mulmod(mload(0x1180), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x10a0)                    mstore(0x10a0, mulmod(mload(0x1160), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1060)                    mstore(0x1060, mulmod(mload(0x1140), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1020)                    mstore(0x1020, mulmod(mload(0x1120), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0xfe0)                    mstore(0xfe0, mulmod(mload(0x1100), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0xfa0)                    mstore(0xfa0, mulmod(mload(0xf60), inv, f_q))                    inv := mulmod(v, inv, f_q)                mstore(0xf60, inv)        }mstore(0x12c0, mulmod(mload(0xf40), mload(0xf60), f_q))mstore(0x12e0, mulmod(mload(0xf80), mload(0xfa0), f_q))mstore(0x1300, mulmod(mload(0xfc0), mload(0xfe0), f_q))mstore(0x1320, mulmod(mload(0x1000), mload(0x1020), f_q))mstore(0x1340, mulmod(mload(0x1040), mload(0x1060), f_q))mstore(0x1360, mulmod(mload(0x1080), mload(0x10a0), f_q))mstore(0x1380, mulmod(mload(0x10c0), mload(0x10e0), f_q)){            let result := mulmod(mload(0x1380), mload(0xa0), f_q)mstore(0x13a0, result)        }mstore(0x13c0, addmod(1, sub(f_q, mload(0x800)), f_q))mstore(0x13e0, mulmod(mload(0x13c0), mload(0x800), f_q))mstore(0x1400, addmod(2, sub(f_q, mload(0x800)), f_q))mstore(0x1420, mulmod(mload(0x1400), mload(0x13e0), f_q))mstore(0x1440, mulmod(mload(0x6c0), mload(0x6a0), f_q))mstore(0x1460, addmod(mload(0x1440), mload(0x700), f_q))mstore(0x1480, addmod(mload(0x6e0), sub(f_q, mload(0x1460)), f_q))mstore(0x14a0, mulmod(mload(0x1480), mload(0x1420), f_q))mstore(0x14c0, mulmod(mload(0x500), mload(0x14a0), f_q))mstore(0x14e0, addmod(1, sub(f_q, mload(0x840)), f_q))mstore(0x1500, mulmod(mload(0x14e0), mload(0x840), f_q))mstore(0x1520, addmod(2, sub(f_q, mload(0x840)), f_q))mstore(0x1540, mulmod(mload(0x1520), mload(0x1500), f_q))mstore(0x1560, addmod(mload(0x6e0), sub(f_q, mload(0x6c0)), f_q))mstore(0x1580, mulmod(mload(0x1560), mload(0x1540), f_q))mstore(0x15a0, addmod(mload(0x14c0), mload(0x1580), f_q))mstore(0x15c0, mulmod(mload(0x500), mload(0x15a0), f_q))mstore(0x15e0, mulmod(mload(0x1400), mload(0x800), f_q))mstore(0x1600, addmod(3, sub(f_q, mload(0x800)), f_q))mstore(0x1620, mulmod(mload(0x1600), mload(0x15e0), f_q))mstore(0x1640, addmod(mload(0x6a0), mload(0x6c0), f_q))mstore(0x1660, addmod(mload(0x6e0), sub(f_q, mload(0x1640)), f_q))mstore(0x1680, mulmod(mload(0x1660), mload(0x1620), f_q))mstore(0x16a0, addmod(mload(0x15c0), mload(0x1680), f_q))mstore(0x16c0, mulmod(mload(0x500), mload(0x16a0), f_q))mstore(0x16e0, addmod(1, sub(f_q, mload(0x820)), f_q))mstore(0x1700, mulmod(mload(0x16e0), mload(0x820), f_q))mstore(0x1720, addmod(2, sub(f_q, mload(0x820)), f_q))mstore(0x1740, mulmod(mload(0x1720), mload(0x1700), f_q))mstore(0x1760, addmod(mload(0x6e0), sub(f_q, mload(0x1440)), f_q))mstore(0x1780, mulmod(mload(0x1760), mload(0x1740), f_q))mstore(0x17a0, addmod(mload(0x16c0), mload(0x1780), f_q))mstore(0x17c0, mulmod(mload(0x500), mload(0x17a0), f_q))mstore(0x17e0, mulmod(mload(0x1600), mload(0x13e0), f_q))mstore(0x1800, addmod(mload(0x6a0), sub(f_q, mload(0x6c0)), f_q))mstore(0x1820, addmod(mload(0x6e0), sub(f_q, mload(0x1800)), f_q))mstore(0x1840, mulmod(mload(0x1820), mload(0x17e0), f_q))mstore(0x1860, addmod(mload(0x17c0), mload(0x1840), f_q))mstore(0x1880, mulmod(mload(0x500), mload(0x1860), f_q))mstore(0x18a0, mulmod(mload(0x1720), mload(0x820), f_q))mstore(0x18c0, addmod(3, sub(f_q, mload(0x820)), f_q))mstore(0x18e0, mulmod(mload(0x18c0), mload(0x18a0), f_q))mstore(0x1900, addmod(mload(0x6c0), mload(0x700), f_q))mstore(0x1920, addmod(mload(0x6e0), sub(f_q, mload(0x1900)), f_q))mstore(0x1940, mulmod(mload(0x1920), mload(0x18e0), f_q))mstore(0x1960, addmod(mload(0x1880), mload(0x1940), f_q))mstore(0x1980, mulmod(mload(0x500), mload(0x1960), f_q))mstore(0x19a0, mulmod(mload(0x18c0), mload(0x1700), f_q))mstore(0x19c0, addmod(mload(0x6e0), sub(f_q, sub(f_q, mload(0x6c0))), f_q))mstore(0x19e0, mulmod(mload(0x19c0), mload(0x19a0), f_q))mstore(0x1a00, addmod(mload(0x1980), mload(0x19e0), f_q))mstore(0x1a20, mulmod(mload(0x500), mload(0x1a00), f_q))mstore(0x1a40, mulmod(mload(0x1520), mload(0x840), f_q))mstore(0x1a60, addmod(3, sub(f_q, mload(0x840)), f_q))mstore(0x1a80, mulmod(mload(0x1a60), mload(0x1a40), f_q))mstore(0x1aa0, addmod(mload(0x6c0), sub(f_q, mload(0x6e0)), f_q))mstore(0x1ac0, mulmod(mload(0x1aa0), mload(0x1a80), f_q))mstore(0x1ae0, addmod(mload(0x1a20), mload(0x1ac0), f_q))mstore(0x1b00, mulmod(mload(0x500), mload(0x1ae0), f_q))mstore(0x1b20, mulmod(mload(0x1a60), mload(0x1500), f_q))mstore(0x1b40, mulmod(mload(0x6c0), mload(0x1b20), f_q))mstore(0x1b60, addmod(mload(0x1b00), mload(0x1b40), f_q))mstore(0x1b80, mulmod(mload(0x500), mload(0x1b60), f_q))mstore(0x1ba0, addmod(mload(0x6c0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(0x1bc0, mulmod(mload(0x1ba0), mload(0x6c0), f_q))mstore(0x1be0, mulmod(mload(0x1bc0), mload(0x860), f_q))mstore(0x1c00, addmod(mload(0x1b80), mload(0x1be0), f_q))mstore(0x1c20, mulmod(mload(0x500), mload(0x1c00), f_q))mstore(0x1c40, addmod(1, sub(f_q, mload(0x940)), f_q))mstore(0x1c60, mulmod(mload(0x1c40), mload(0x1380), f_q))mstore(0x1c80, addmod(mload(0x1c20), mload(0x1c60), f_q))mstore(0x1ca0, mulmod(mload(0x500), mload(0x1c80), f_q))mstore(0x1cc0, mulmod(mload(0x9a0), mload(0x9a0), f_q))mstore(0x1ce0, addmod(mload(0x1cc0), sub(f_q, mload(0x9a0)), f_q))mstore(0x1d00, mulmod(mload(0x1ce0), mload(0x12c0), f_q))mstore(0x1d20, addmod(mload(0x1ca0), mload(0x1d00), f_q))mstore(0x1d40, mulmod(mload(0x500), mload(0x1d20), f_q))mstore(0x1d60, addmod(mload(0x9a0), sub(f_q, mload(0x980)), f_q))mstore(0x1d80, mulmod(mload(0x1d60), mload(0x1380), f_q))mstore(0x1da0, addmod(mload(0x1d40), mload(0x1d80), f_q))mstore(0x1dc0, mulmod(mload(0x500), mload(0x1da0), f_q))mstore(0x1de0, addmod(1, sub(f_q, mload(0x12c0)), f_q))mstore(0x1e00, addmod(mload(0x12e0), mload(0x1300), f_q))mstore(0x1e20, addmod(mload(0x1e00), mload(0x1320), f_q))mstore(0x1e40, addmod(mload(0x1e20), mload(0x1340), f_q))mstore(0x1e60, addmod(mload(0x1e40), mload(0x1360), f_q))mstore(0x1e80, addmod(mload(0x1de0), sub(f_q, mload(0x1e60)), f_q))mstore(0x1ea0, mulmod(mload(0x8a0), mload(0x300), f_q))mstore(0x1ec0, addmod(mload(0x6a0), mload(0x1ea0), f_q))mstore(0x1ee0, addmod(mload(0x1ec0), mload(0x360), f_q))mstore(0x1f00, mulmod(mload(0x8c0), mload(0x300), f_q))mstore(0x1f20, addmod(mload(0x6c0), mload(0x1f00), f_q))mstore(0x1f40, addmod(mload(0x1f20), mload(0x360), f_q))mstore(0x1f60, mulmod(mload(0x1f40), mload(0x1ee0), f_q))mstore(0x1f80, mulmod(mload(0x8e0), mload(0x300), f_q))mstore(0x1fa0, addmod(mload(0x6e0), mload(0x1f80), f_q))mstore(0x1fc0, addmod(mload(0x1fa0), mload(0x360), f_q))mstore(0x1fe0, mulmod(mload(0x1fc0), mload(0x1f60), f_q))mstore(0x2000, mulmod(mload(0x1fe0), mload(0x960), f_q))mstore(0x2020, mulmod(1, mload(0x300), f_q))mstore(0x2040, mulmod(mload(0x660), mload(0x2020), f_q))mstore(0x2060, addmod(mload(0x6a0), mload(0x2040), f_q))mstore(0x2080, addmod(mload(0x2060), mload(0x360), f_q))mstore(0x20a0, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x300), f_q))mstore(0x20c0, mulmod(mload(0x660), mload(0x20a0), f_q))mstore(0x20e0, addmod(mload(0x6c0), mload(0x20c0), f_q))mstore(0x2100, addmod(mload(0x20e0), mload(0x360), f_q))mstore(0x2120, mulmod(mload(0x2100), mload(0x2080), f_q))mstore(0x2140, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x300), f_q))mstore(0x2160, mulmod(mload(0x660), mload(0x2140), f_q))mstore(0x2180, addmod(mload(0x6e0), mload(0x2160), f_q))mstore(0x21a0, addmod(mload(0x2180), mload(0x360), f_q))mstore(0x21c0, mulmod(mload(0x21a0), mload(0x2120), f_q))mstore(0x21e0, mulmod(mload(0x21c0), mload(0x940), f_q))mstore(0x2200, addmod(mload(0x2000), sub(f_q, mload(0x21e0)), f_q))mstore(0x2220, mulmod(mload(0x2200), mload(0x1e80), f_q))mstore(0x2240, addmod(mload(0x1dc0), mload(0x2220), f_q))mstore(0x2260, mulmod(mload(0x500), mload(0x2240), f_q))mstore(0x2280, mulmod(mload(0x900), mload(0x300), f_q))mstore(0x22a0, addmod(mload(0x13a0), mload(0x2280), f_q))mstore(0x22c0, addmod(mload(0x22a0), mload(0x360), f_q))mstore(0x22e0, mulmod(mload(0x920), mload(0x300), f_q))mstore(0x2300, addmod(mload(0x720), mload(0x22e0), f_q))mstore(0x2320, addmod(mload(0x2300), mload(0x360), f_q))mstore(0x2340, mulmod(mload(0x2320), mload(0x22c0), f_q))mstore(0x2360, mulmod(mload(0x2340), mload(0x9c0), f_q))mstore(0x2380, mulmod(11166246659983828508719468090013646171463329086121580628794302409516816350802, mload(0x300), f_q))mstore(0x23a0, mulmod(mload(0x660), mload(0x2380), f_q))mstore(0x23c0, addmod(mload(0x13a0), mload(0x23a0), f_q))mstore(0x23e0, addmod(mload(0x23c0), mload(0x360), f_q))mstore(0x2400, mulmod(284840088355319032285349970403338060113257071685626700086398481893096618818, mload(0x300), f_q))mstore(0x2420, mulmod(mload(0x660), mload(0x2400), f_q))mstore(0x2440, addmod(mload(0x720), mload(0x2420), f_q))mstore(0x2460, addmod(mload(0x2440), mload(0x360), f_q))mstore(0x2480, mulmod(mload(0x2460), mload(0x23e0), f_q))mstore(0x24a0, mulmod(mload(0x2480), mload(0x9a0), f_q))mstore(0x24c0, addmod(mload(0x2360), sub(f_q, mload(0x24a0)), f_q))mstore(0x24e0, mulmod(mload(0x24c0), mload(0x1e80), f_q))mstore(0x2500, addmod(mload(0x2260), mload(0x24e0), f_q))mstore(0x2520, mulmod(mload(0x500), mload(0x2500), f_q))mstore(0x2540, addmod(1, sub(f_q, mload(0x9e0)), f_q))mstore(0x2560, mulmod(mload(0x2540), mload(0x1380), f_q))mstore(0x2580, addmod(mload(0x2520), mload(0x2560), f_q))mstore(0x25a0, mulmod(mload(0x500), mload(0x2580), f_q))mstore(0x25c0, mulmod(mload(0x9e0), mload(0x9e0), f_q))mstore(0x25e0, addmod(mload(0x25c0), sub(f_q, mload(0x9e0)), f_q))mstore(0x2600, mulmod(mload(0x25e0), mload(0x12c0), f_q))mstore(0x2620, addmod(mload(0x25a0), mload(0x2600), f_q))mstore(0x2640, mulmod(mload(0x500), mload(0x2620), f_q))mstore(0x2660, addmod(mload(0xa20), mload(0x300), f_q))mstore(0x2680, mulmod(mload(0x2660), mload(0xa00), f_q))mstore(0x26a0, addmod(mload(0xa60), mload(0x360), f_q))mstore(0x26c0, mulmod(mload(0x26a0), mload(0x2680), f_q))mstore(0x26e0, mulmod(mload(0x6a0), mload(0x7c0), f_q))mstore(0x2700, addmod(1, sub(f_q, mload(0x7c0)), f_q))mstore(0x2720, mulmod(mload(0x2700), 0, f_q))mstore(0x2740, addmod(mload(0x26e0), mload(0x2720), f_q))mstore(0x2760, mulmod(mload(0x1a0), mload(0x2740), f_q))mstore(0x2780, mulmod(mload(0x6c0), mload(0x7c0), f_q))mstore(0x27a0, addmod(mload(0x2780), mload(0x2720), f_q))mstore(0x27c0, addmod(mload(0x2760), mload(0x27a0), f_q))mstore(0x27e0, addmod(mload(0x27c0), mload(0x300), f_q))mstore(0x2800, mulmod(mload(0x27e0), mload(0x9e0), f_q))mstore(0x2820, mulmod(mload(0x1a0), mload(0x740), f_q))mstore(0x2840, addmod(mload(0x2820), mload(0x760), f_q))mstore(0x2860, addmod(mload(0x2840), mload(0x360), f_q))mstore(0x2880, mulmod(mload(0x2860), mload(0x2800), f_q))mstore(0x28a0, addmod(mload(0x26c0), sub(f_q, mload(0x2880)), f_q))mstore(0x28c0, mulmod(mload(0x28a0), mload(0x1e80), f_q))mstore(0x28e0, addmod(mload(0x2640), mload(0x28c0), f_q))mstore(0x2900, mulmod(mload(0x500), mload(0x28e0), f_q))mstore(0x2920, addmod(mload(0xa20), sub(f_q, mload(0xa60)), f_q))mstore(0x2940, mulmod(mload(0x2920), mload(0x1380), f_q))mstore(0x2960, addmod(mload(0x2900), mload(0x2940), f_q))mstore(0x2980, mulmod(mload(0x500), mload(0x2960), f_q))mstore(0x29a0, mulmod(mload(0x2920), mload(0x1e80), f_q))mstore(0x29c0, addmod(mload(0xa20), sub(f_q, mload(0xa40)), f_q))mstore(0x29e0, mulmod(mload(0x29c0), mload(0x29a0), f_q))mstore(0x2a00, addmod(mload(0x2980), mload(0x29e0), f_q))mstore(0x2a20, mulmod(mload(0x500), mload(0x2a00), f_q))mstore(0x2a40, addmod(1, sub(f_q, mload(0xa80)), f_q))mstore(0x2a60, mulmod(mload(0x2a40), mload(0x1380), f_q))mstore(0x2a80, addmod(mload(0x2a20), mload(0x2a60), f_q))mstore(0x2aa0, mulmod(mload(0x500), mload(0x2a80), f_q))mstore(0x2ac0, mulmod(mload(0xa80), mload(0xa80), f_q))mstore(0x2ae0, addmod(mload(0x2ac0), sub(f_q, mload(0xa80)), f_q))mstore(0x2b00, mulmod(mload(0x2ae0), mload(0x12c0), f_q))mstore(0x2b20, addmod(mload(0x2aa0), mload(0x2b00), f_q))mstore(0x2b40, mulmod(mload(0x500), mload(0x2b20), f_q))mstore(0x2b60, addmod(mload(0xac0), mload(0x300), f_q))mstore(0x2b80, mulmod(mload(0x2b60), mload(0xaa0), f_q))mstore(0x2ba0, addmod(mload(0xb00), mload(0x360), f_q))mstore(0x2bc0, mulmod(mload(0x2ba0), mload(0x2b80), f_q))mstore(0x2be0, mulmod(mload(0x6a0), mload(0x7e0), f_q))mstore(0x2c00, addmod(1, sub(f_q, mload(0x7e0)), f_q))mstore(0x2c20, mulmod(mload(0x2c00), 0, f_q))mstore(0x2c40, addmod(mload(0x2be0), mload(0x2c20), f_q))mstore(0x2c60, mulmod(mload(0x1a0), mload(0x2c40), f_q))mstore(0x2c80, mulmod(mload(0x6c0), mload(0x7e0), f_q))mstore(0x2ca0, mulmod(mload(0x2c00), 64, f_q))mstore(0x2cc0, addmod(mload(0x2c80), mload(0x2ca0), f_q))mstore(0x2ce0, addmod(mload(0x2c60), mload(0x2cc0), f_q))mstore(0x2d00, addmod(mload(0x2ce0), mload(0x300), f_q))mstore(0x2d20, mulmod(mload(0x2d00), mload(0xa80), f_q))mstore(0x2d40, mulmod(mload(0x1a0), mload(0x780), f_q))mstore(0x2d60, addmod(mload(0x2d40), mload(0x7a0), f_q))mstore(0x2d80, addmod(mload(0x2d60), mload(0x360), f_q))mstore(0x2da0, mulmod(mload(0x2d80), mload(0x2d20), f_q))mstore(0x2dc0, addmod(mload(0x2bc0), sub(f_q, mload(0x2da0)), f_q))mstore(0x2de0, mulmod(mload(0x2dc0), mload(0x1e80), f_q))mstore(0x2e00, addmod(mload(0x2b40), mload(0x2de0), f_q))mstore(0x2e20, mulmod(mload(0x500), mload(0x2e00), f_q))mstore(0x2e40, addmod(mload(0xac0), sub(f_q, mload(0xb00)), f_q))mstore(0x2e60, mulmod(mload(0x2e40), mload(0x1380), f_q))mstore(0x2e80, addmod(mload(0x2e20), mload(0x2e60), f_q))mstore(0x2ea0, mulmod(mload(0x500), mload(0x2e80), f_q))mstore(0x2ec0, mulmod(mload(0x2e40), mload(0x1e80), f_q))mstore(0x2ee0, addmod(mload(0xac0), sub(f_q, mload(0xae0)), f_q))mstore(0x2f00, mulmod(mload(0x2ee0), mload(0x2ec0), f_q))mstore(0x2f20, addmod(mload(0x2ea0), mload(0x2f00), f_q))mstore(0x2f40, mulmod(mload(0xee0), mload(0xee0), f_q))mstore(0x2f60, mulmod(mload(0x2f40), mload(0xee0), f_q))mstore(0x2f80, mulmod(mload(0x2f60), mload(0xee0), f_q))mstore(0x2fa0, mulmod(1, mload(0xee0), f_q))mstore(0x2fc0, mulmod(1, mload(0x2f40), f_q))mstore(0x2fe0, mulmod(1, mload(0x2f60), f_q))mstore(0x3000, mulmod(mload(0x2f20), mload(0xf00), f_q))mstore(0x3020, mulmod(mload(0xca0), mload(0xca0), f_q))mstore(0x3040, mulmod(mload(0x3020), mload(0xca0), f_q))mstore(0x3060, mulmod(mload(0x3040), mload(0xca0), f_q))mstore(0x3080, mulmod(mload(0xb40), mload(0xb40), f_q))mstore(0x30a0, mulmod(mload(0x3080), mload(0xb40), f_q))mstore(0x30c0, mulmod(mload(0x30a0), mload(0xb40), f_q))mstore(0x30e0, mulmod(mload(0x30c0), mload(0xb40), f_q))mstore(0x3100, mulmod(mload(0x30e0), mload(0xb40), f_q))mstore(0x3120, mulmod(mload(0x3100), mload(0xb40), f_q))mstore(0x3140, mulmod(mload(0x3120), mload(0xb40), f_q))mstore(0x3160, mulmod(mload(0x3140), mload(0xb40), f_q))mstore(0x3180, mulmod(mload(0x3160), mload(0xb40), f_q))mstore(0x31a0, mulmod(mload(0x3180), mload(0xb40), f_q))mstore(0x31c0, mulmod(mload(0x31a0), mload(0xb40), f_q))mstore(0x31e0, mulmod(mload(0x31c0), mload(0xb40), f_q))mstore(0x3200, mulmod(mload(0x31e0), mload(0xb40), f_q))mstore(0x3220, mulmod(mload(0x3200), mload(0xb40), f_q))mstore(0x3240, mulmod(mload(0x3220), mload(0xb40), f_q))mstore(0x3260, mulmod(mload(0x3240), mload(0xb40), f_q))mstore(0x3280, mulmod(mload(0x3260), mload(0xb40), f_q))mstore(0x32a0, mulmod(mload(0x3280), mload(0xb40), f_q))mstore(0x32c0, mulmod(mload(0x32a0), mload(0xb40), f_q))mstore(0x32e0, mulmod(mload(0x32c0), mload(0xb40), f_q))mstore(0x3300, mulmod(mload(0x32e0), mload(0xb40), f_q))mstore(0x3320, mulmod(mload(0x3300), mload(0xb40), f_q))mstore(0x3340, mulmod(mload(0x3320), mload(0xb40), f_q))mstore(0x3360, mulmod(mload(0x3340), mload(0xb40), f_q))mstore(0x3380, mulmod(mload(0x3360), mload(0xb40), f_q))mstore(0x33a0, mulmod(mload(0x3380), mload(0xb40), f_q))mstore(0x33c0, mulmod(mload(0x33a0), mload(0xb40), f_q))mstore(0x33e0, mulmod(mload(0x33c0), mload(0xb40), f_q))mstore(0x3400, mulmod(sub(f_q, mload(0x6a0)), 1, f_q))mstore(0x3420, mulmod(sub(f_q, mload(0x6c0)), mload(0xb40), f_q))mstore(0x3440, mulmod(1, mload(0xb40), f_q))mstore(0x3460, addmod(mload(0x3400), mload(0x3420), f_q))mstore(0x3480, mulmod(sub(f_q, mload(0x6e0)), mload(0x3080), f_q))mstore(0x34a0, mulmod(1, mload(0x3080), f_q))mstore(0x34c0, addmod(mload(0x3460), mload(0x3480), f_q))mstore(0x34e0, mulmod(sub(f_q, mload(0x940)), mload(0x30a0), f_q))mstore(0x3500, mulmod(1, mload(0x30a0), f_q))mstore(0x3520, addmod(mload(0x34c0), mload(0x34e0), f_q))mstore(0x3540, mulmod(sub(f_q, mload(0x9a0)), mload(0x30c0), f_q))mstore(0x3560, mulmod(1, mload(0x30c0), f_q))mstore(0x3580, addmod(mload(0x3520), mload(0x3540), f_q))mstore(0x35a0, mulmod(sub(f_q, mload(0x9e0)), mload(0x30e0), f_q))mstore(0x35c0, mulmod(1, mload(0x30e0), f_q))mstore(0x35e0, addmod(mload(0x3580), mload(0x35a0), f_q))mstore(0x3600, mulmod(sub(f_q, mload(0xa20)), mload(0x3100), f_q))mstore(0x3620, mulmod(1, mload(0x3100), f_q))mstore(0x3640, addmod(mload(0x35e0), mload(0x3600), f_q))mstore(0x3660, mulmod(sub(f_q, mload(0xa60)), mload(0x3120), f_q))mstore(0x3680, mulmod(1, mload(0x3120), f_q))mstore(0x36a0, addmod(mload(0x3640), mload(0x3660), f_q))mstore(0x36c0, mulmod(sub(f_q, mload(0xa80)), mload(0x3140), f_q))mstore(0x36e0, mulmod(1, mload(0x3140), f_q))mstore(0x3700, addmod(mload(0x36a0), mload(0x36c0), f_q))mstore(0x3720, mulmod(sub(f_q, mload(0xac0)), mload(0x3160), f_q))mstore(0x3740, mulmod(1, mload(0x3160), f_q))mstore(0x3760, addmod(mload(0x3700), mload(0x3720), f_q))mstore(0x3780, mulmod(sub(f_q, mload(0xb00)), mload(0x3180), f_q))mstore(0x37a0, mulmod(1, mload(0x3180), f_q))mstore(0x37c0, addmod(mload(0x3760), mload(0x3780), f_q))mstore(0x37e0, mulmod(sub(f_q, mload(0x720)), mload(0x31a0), f_q))mstore(0x3800, mulmod(1, mload(0x31a0), f_q))mstore(0x3820, addmod(mload(0x37c0), mload(0x37e0), f_q))mstore(0x3840, mulmod(sub(f_q, mload(0x740)), mload(0x31c0), f_q))mstore(0x3860, mulmod(1, mload(0x31c0), f_q))mstore(0x3880, addmod(mload(0x3820), mload(0x3840), f_q))mstore(0x38a0, mulmod(sub(f_q, mload(0x760)), mload(0x31e0), f_q))mstore(0x38c0, mulmod(1, mload(0x31e0), f_q))mstore(0x38e0, addmod(mload(0x3880), mload(0x38a0), f_q))mstore(0x3900, mulmod(sub(f_q, mload(0x780)), mload(0x3200), f_q))mstore(0x3920, mulmod(1, mload(0x3200), f_q))mstore(0x3940, addmod(mload(0x38e0), mload(0x3900), f_q))mstore(0x3960, addmod(mload(0x3860), mload(0x3920), f_q))mstore(0x3980, mulmod(sub(f_q, mload(0x7a0)), mload(0x3220), f_q))mstore(0x39a0, mulmod(1, mload(0x3220), f_q))mstore(0x39c0, addmod(mload(0x3940), mload(0x3980), f_q))mstore(0x39e0, mulmod(sub(f_q, mload(0x7c0)), mload(0x3240), f_q))mstore(0x3a00, mulmod(1, mload(0x3240), f_q))mstore(0x3a20, addmod(mload(0x39c0), mload(0x39e0), f_q))mstore(0x3a40, mulmod(sub(f_q, mload(0x7e0)), mload(0x3260), f_q))mstore(0x3a60, mulmod(1, mload(0x3260), f_q))mstore(0x3a80, addmod(mload(0x3a20), mload(0x3a40), f_q))mstore(0x3aa0, mulmod(sub(f_q, mload(0x800)), mload(0x3280), f_q))mstore(0x3ac0, mulmod(1, mload(0x3280), f_q))mstore(0x3ae0, addmod(mload(0x3a80), mload(0x3aa0), f_q))mstore(0x3b00, mulmod(sub(f_q, mload(0x820)), mload(0x32a0), f_q))mstore(0x3b20, mulmod(1, mload(0x32a0), f_q))mstore(0x3b40, addmod(mload(0x3ae0), mload(0x3b00), f_q))mstore(0x3b60, mulmod(sub(f_q, mload(0x840)), mload(0x32c0), f_q))mstore(0x3b80, mulmod(1, mload(0x32c0), f_q))mstore(0x3ba0, addmod(mload(0x3b40), mload(0x3b60), f_q))mstore(0x3bc0, mulmod(sub(f_q, mload(0x860)), mload(0x32e0), f_q))mstore(0x3be0, mulmod(1, mload(0x32e0), f_q))mstore(0x3c00, addmod(mload(0x3ba0), mload(0x3bc0), f_q))mstore(0x3c20, addmod(mload(0x3800), mload(0x3be0), f_q))mstore(0x3c40, mulmod(sub(f_q, mload(0x8a0)), mload(0x3300), f_q))mstore(0x3c60, mulmod(1, mload(0x3300), f_q))mstore(0x3c80, addmod(mload(0x3c00), mload(0x3c40), f_q))mstore(0x3ca0, mulmod(sub(f_q, mload(0x8c0)), mload(0x3320), f_q))mstore(0x3cc0, mulmod(1, mload(0x3320), f_q))mstore(0x3ce0, addmod(mload(0x3c80), mload(0x3ca0), f_q))mstore(0x3d00, mulmod(sub(f_q, mload(0x8e0)), mload(0x3340), f_q))mstore(0x3d20, mulmod(1, mload(0x3340), f_q))mstore(0x3d40, addmod(mload(0x3ce0), mload(0x3d00), f_q))mstore(0x3d60, mulmod(sub(f_q, mload(0x900)), mload(0x3360), f_q))mstore(0x3d80, mulmod(1, mload(0x3360), f_q))mstore(0x3da0, addmod(mload(0x3d40), mload(0x3d60), f_q))mstore(0x3dc0, mulmod(sub(f_q, mload(0x920)), mload(0x3380), f_q))mstore(0x3de0, mulmod(1, mload(0x3380), f_q))mstore(0x3e00, addmod(mload(0x3da0), mload(0x3dc0), f_q))mstore(0x3e20, mulmod(sub(f_q, mload(0x3000)), mload(0x33a0), f_q))mstore(0x3e40, mulmod(1, mload(0x33a0), f_q))mstore(0x3e60, mulmod(mload(0x2fa0), mload(0x33a0), f_q))mstore(0x3e80, mulmod(mload(0x2fc0), mload(0x33a0), f_q))mstore(0x3ea0, mulmod(mload(0x2fe0), mload(0x33a0), f_q))mstore(0x3ec0, addmod(mload(0x3e00), mload(0x3e20), f_q))mstore(0x3ee0, mulmod(sub(f_q, mload(0x880)), mload(0x33c0), f_q))mstore(0x3f00, mulmod(1, mload(0x33c0), f_q))mstore(0x3f20, addmod(mload(0x3ec0), mload(0x3ee0), f_q))mstore(0x3f40, mulmod(mload(0x3f20), 1, f_q))mstore(0x3f60, mulmod(mload(0x3440), 1, f_q))mstore(0x3f80, mulmod(mload(0x34a0), 1, f_q))mstore(0x3fa0, mulmod(mload(0x3500), 1, f_q))mstore(0x3fc0, mulmod(mload(0x3560), 1, f_q))mstore(0x3fe0, mulmod(mload(0x35c0), 1, f_q))mstore(0x4000, mulmod(mload(0x3620), 1, f_q))mstore(0x4020, mulmod(mload(0x3680), 1, f_q))mstore(0x4040, mulmod(mload(0x36e0), 1, f_q))mstore(0x4060, mulmod(mload(0x3740), 1, f_q))mstore(0x4080, mulmod(mload(0x37a0), 1, f_q))mstore(0x40a0, mulmod(mload(0x3c20), 1, f_q))mstore(0x40c0, mulmod(mload(0x3960), 1, f_q))mstore(0x40e0, mulmod(mload(0x38c0), 1, f_q))mstore(0x4100, mulmod(mload(0x39a0), 1, f_q))mstore(0x4120, mulmod(mload(0x3a00), 1, f_q))mstore(0x4140, mulmod(mload(0x3a60), 1, f_q))mstore(0x4160, mulmod(mload(0x3ac0), 1, f_q))mstore(0x4180, mulmod(mload(0x3b20), 1, f_q))mstore(0x41a0, mulmod(mload(0x3b80), 1, f_q))mstore(0x41c0, mulmod(mload(0x3c60), 1, f_q))mstore(0x41e0, mulmod(mload(0x3cc0), 1, f_q))mstore(0x4200, mulmod(mload(0x3d20), 1, f_q))mstore(0x4220, mulmod(mload(0x3d80), 1, f_q))mstore(0x4240, mulmod(mload(0x3de0), 1, f_q))mstore(0x4260, mulmod(mload(0x3e40), 1, f_q))mstore(0x4280, mulmod(mload(0x3e60), 1, f_q))mstore(0x42a0, mulmod(mload(0x3e80), 1, f_q))mstore(0x42c0, mulmod(mload(0x3ea0), 1, f_q))mstore(0x42e0, mulmod(mload(0x3f00), 1, f_q))mstore(0x4300, mulmod(sub(f_q, mload(0x700)), 1, f_q))mstore(0x4320, mulmod(sub(f_q, mload(0xa40)), mload(0xb40), f_q))mstore(0x4340, addmod(mload(0x4300), mload(0x4320), f_q))mstore(0x4360, mulmod(sub(f_q, mload(0xae0)), mload(0x3080), f_q))mstore(0x4380, addmod(mload(0x4340), mload(0x4360), f_q))mstore(0x43a0, mulmod(mload(0x4380), mload(0xca0), f_q))mstore(0x43c0, mulmod(1, mload(0xca0), f_q))mstore(0x43e0, mulmod(mload(0x3440), mload(0xca0), f_q))mstore(0x4400, mulmod(mload(0x34a0), mload(0xca0), f_q))mstore(0x4420, addmod(mload(0x3f40), mload(0x43a0), f_q))mstore(0x4440, addmod(mload(0x3f80), mload(0x43c0), f_q))mstore(0x4460, addmod(mload(0x4000), mload(0x43e0), f_q))mstore(0x4480, addmod(mload(0x4060), mload(0x4400), f_q))mstore(0x44a0, mulmod(sub(f_q, mload(0x960)), 1, f_q))mstore(0x44c0, mulmod(sub(f_q, mload(0x9c0)), mload(0xb40), f_q))mstore(0x44e0, addmod(mload(0x44a0), mload(0x44c0), f_q))mstore(0x4500, mulmod(sub(f_q, mload(0xa00)), mload(0x3080), f_q))mstore(0x4520, addmod(mload(0x44e0), mload(0x4500), f_q))mstore(0x4540, mulmod(sub(f_q, mload(0xaa0)), mload(0x30a0), f_q))mstore(0x4560, addmod(mload(0x4520), mload(0x4540), f_q))mstore(0x4580, mulmod(mload(0x4560), mload(0x3020), f_q))mstore(0x45a0, mulmod(1, mload(0x3020), f_q))mstore(0x45c0, mulmod(mload(0x3440), mload(0x3020), f_q))mstore(0x45e0, mulmod(mload(0x34a0), mload(0x3020), f_q))mstore(0x4600, mulmod(mload(0x3500), mload(0x3020), f_q))mstore(0x4620, addmod(mload(0x4420), mload(0x4580), f_q))mstore(0x4640, addmod(mload(0x3fa0), mload(0x45a0), f_q))mstore(0x4660, addmod(mload(0x3fc0), mload(0x45c0), f_q))mstore(0x4680, addmod(mload(0x3fe0), mload(0x45e0), f_q))mstore(0x46a0, addmod(mload(0x4040), mload(0x4600), f_q))mstore(0x46c0, mulmod(sub(f_q, mload(0x980)), 1, f_q))mstore(0x46e0, mulmod(mload(0x46c0), mload(0x3040), f_q))mstore(0x4700, mulmod(1, mload(0x3040), f_q))mstore(0x4720, addmod(mload(0x4620), mload(0x46e0), f_q))mstore(0x4740, addmod(mload(0x4640), mload(0x4700), f_q))mstore(0x4760, mulmod(1, mload(0x660), f_q))mstore(0x4780, mulmod(1, mload(0x4760), f_q))mstore(0x47a0, mulmod(11402394834529375719535454173347509224290498423785625657829583372803806900475, mload(0x660), f_q))mstore(0x47c0, mulmod(mload(0x43c0), mload(0x47a0), f_q))mstore(0x47e0, mulmod(21846745818185811051373434299876022191132089169516983080959277716660228899818, mload(0x660), f_q))mstore(0x4800, mulmod(mload(0x45a0), mload(0x47e0), f_q))mstore(0x4820, mulmod(18801136258871406524726641978934912926273987048785013233465874845411408769764, mload(0x660), f_q))mstore(0x4840, mulmod(mload(0x4700), mload(0x4820), f_q))mstore(0x4860, 0x0000000000000000000000000000000000000000000000000000000000000001)                    mstore(0x4880, 0x0000000000000000000000000000000000000000000000000000000000000002)mstore(0x48a0, mload(0x4720))success := and(eq(staticcall(gas(), 0x7, 0x4860, 0x60, 0x4860, 0x40), 1), success)mstore(0x48c0, mload(0x4860))                    mstore(0x48e0, mload(0x4880))mstore(0x4900, mload(0xc0))                    mstore(0x4920, mload(0xe0))success := and(eq(staticcall(gas(), 0x6, 0x48c0, 0x80, 0x48c0, 0x40), 1), success)mstore(0x4940, mload(0x100))                    mstore(0x4960, mload(0x120))mstore(0x4980, mload(0x3f60))success := and(eq(staticcall(gas(), 0x7, 0x4940, 0x60, 0x4940, 0x40), 1), success)mstore(0x49a0, mload(0x48c0))                    mstore(0x49c0, mload(0x48e0))mstore(0x49e0, mload(0x4940))                    mstore(0x4a00, mload(0x4960))success := and(eq(staticcall(gas(), 0x6, 0x49a0, 0x80, 0x49a0, 0x40), 1), success)mstore(0x4a20, mload(0x140))                    mstore(0x4a40, mload(0x160))mstore(0x4a60, mload(0x4440))success := and(eq(staticcall(gas(), 0x7, 0x4a20, 0x60, 0x4a20, 0x40), 1), success)mstore(0x4a80, mload(0x49a0))                    mstore(0x4aa0, mload(0x49c0))mstore(0x4ac0, mload(0x4a20))                    mstore(0x4ae0, mload(0x4a40))success := and(eq(staticcall(gas(), 0x6, 0x4a80, 0x80, 0x4a80, 0x40), 1), success)mstore(0x4b00, mload(0x3a0))                    mstore(0x4b20, mload(0x3c0))mstore(0x4b40, mload(0x4740))success := and(eq(staticcall(gas(), 0x7, 0x4b00, 0x60, 0x4b00, 0x40), 1), success)mstore(0x4b60, mload(0x4a80))                    mstore(0x4b80, mload(0x4aa0))mstore(0x4ba0, mload(0x4b00))                    mstore(0x4bc0, mload(0x4b20))success := and(eq(staticcall(gas(), 0x6, 0x4b60, 0x80, 0x4b60, 0x40), 1), success)mstore(0x4be0, mload(0x3e0))                    mstore(0x4c00, mload(0x400))mstore(0x4c20, mload(0x4660))success := and(eq(staticcall(gas(), 0x7, 0x4be0, 0x60, 0x4be0, 0x40), 1), success)mstore(0x4c40, mload(0x4b60))                    mstore(0x4c60, mload(0x4b80))mstore(0x4c80, mload(0x4be0))                    mstore(0x4ca0, mload(0x4c00))success := and(eq(staticcall(gas(), 0x6, 0x4c40, 0x80, 0x4c40, 0x40), 1), success)mstore(0x4cc0, mload(0x420))                    mstore(0x4ce0, mload(0x440))mstore(0x4d00, mload(0x4680))success := and(eq(staticcall(gas(), 0x7, 0x4cc0, 0x60, 0x4cc0, 0x40), 1), success)mstore(0x4d20, mload(0x4c40))                    mstore(0x4d40, mload(0x4c60))mstore(0x4d60, mload(0x4cc0))                    mstore(0x4d80, mload(0x4ce0))success := and(eq(staticcall(gas(), 0x6, 0x4d20, 0x80, 0x4d20, 0x40), 1), success)mstore(0x4da0, mload(0x1e0))                    mstore(0x4dc0, mload(0x200))mstore(0x4de0, mload(0x4460))success := and(eq(staticcall(gas(), 0x7, 0x4da0, 0x60, 0x4da0, 0x40), 1), success)mstore(0x4e00, mload(0x4d20))                    mstore(0x4e20, mload(0x4d40))mstore(0x4e40, mload(0x4da0))                    mstore(0x4e60, mload(0x4dc0))success := and(eq(staticcall(gas(), 0x6, 0x4e00, 0x80, 0x4e00, 0x40), 1), success)mstore(0x4e80, mload(0x220))                    mstore(0x4ea0, mload(0x240))mstore(0x4ec0, mload(0x4020))success := and(eq(staticcall(gas(), 0x7, 0x4e80, 0x60, 0x4e80, 0x40), 1), success)mstore(0x4ee0, mload(0x4e00))                    mstore(0x4f00, mload(0x4e20))mstore(0x4f20, mload(0x4e80))                    mstore(0x4f40, mload(0x4ea0))success := and(eq(staticcall(gas(), 0x6, 0x4ee0, 0x80, 0x4ee0, 0x40), 1), success)mstore(0x4f60, mload(0x460))                    mstore(0x4f80, mload(0x480))mstore(0x4fa0, mload(0x46a0))success := and(eq(staticcall(gas(), 0x7, 0x4f60, 0x60, 0x4f60, 0x40), 1), success)mstore(0x4fc0, mload(0x4ee0))                    mstore(0x4fe0, mload(0x4f00))mstore(0x5000, mload(0x4f60))                    mstore(0x5020, mload(0x4f80))success := and(eq(staticcall(gas(), 0x6, 0x4fc0, 0x80, 0x4fc0, 0x40), 1), success)mstore(0x5040, mload(0x260))                    mstore(0x5060, mload(0x280))mstore(0x5080, mload(0x4480))success := and(eq(staticcall(gas(), 0x7, 0x5040, 0x60, 0x5040, 0x40), 1), success)mstore(0x50a0, mload(0x4fc0))                    mstore(0x50c0, mload(0x4fe0))mstore(0x50e0, mload(0x5040))                    mstore(0x5100, mload(0x5060))success := and(eq(staticcall(gas(), 0x6, 0x50a0, 0x80, 0x50a0, 0x40), 1), success)mstore(0x5120, mload(0x2a0))                    mstore(0x5140, mload(0x2c0))mstore(0x5160, mload(0x4080))success := and(eq(staticcall(gas(), 0x7, 0x5120, 0x60, 0x5120, 0x40), 1), success)mstore(0x5180, mload(0x50a0))                    mstore(0x51a0, mload(0x50c0))mstore(0x51c0, mload(0x5120))                    mstore(0x51e0, mload(0x5140))success := and(eq(staticcall(gas(), 0x6, 0x5180, 0x80, 0x5180, 0x40), 1), success)mstore(0x5200, 0x0000000000000000000000000000000000000000000000000000000000000000)                    mstore(0x5220, 0x0000000000000000000000000000000000000000000000000000000000000000)mstore(0x5240, mload(0x40a0))success := and(eq(staticcall(gas(), 0x7, 0x5200, 0x60, 0x5200, 0x40), 1), success)mstore(0x5260, mload(0x5180))                    mstore(0x5280, mload(0x51a0))mstore(0x52a0, mload(0x5200))                    mstore(0x52c0, mload(0x5220))success := and(eq(staticcall(gas(), 0x6, 0x5260, 0x80, 0x5260, 0x40), 1), success)mstore(0x52e0, 0x00ebe31c8ca337e1248929ef9f3dc0f2d0929360232b9cf8db343f27406bbbe5)                    mstore(0x5300, 0x0d372e36f1b027717a66f66eec7b8fa72c9447ee21fba497b536bb2ad130db19)mstore(0x5320, mload(0x40c0))success := and(eq(staticcall(gas(), 0x7, 0x52e0, 0x60, 0x52e0, 0x40), 1), success)mstore(0x5340, mload(0x5260))                    mstore(0x5360, mload(0x5280))mstore(0x5380, mload(0x52e0))                    mstore(0x53a0, mload(0x5300))success := and(eq(staticcall(gas(), 0x6, 0x5340, 0x80, 0x5340, 0x40), 1), success)mstore(0x53c0, 0x0bd67ac40e379f25499b2aa1fbb0f9365bae08c4b097e96f23dd2e05ac41ef6e)                    mstore(0x53e0, 0x2ee263e7552cdc4d7cab8fa1eac0c8211348ab3b2f2967a2195020e7fe339563)mstore(0x5400, mload(0x40e0))success := and(eq(staticcall(gas(), 0x7, 0x53c0, 0x60, 0x53c0, 0x40), 1), success)mstore(0x5420, mload(0x5340))                    mstore(0x5440, mload(0x5360))mstore(0x5460, mload(0x53c0))                    mstore(0x5480, mload(0x53e0))success := and(eq(staticcall(gas(), 0x6, 0x5420, 0x80, 0x5420, 0x40), 1), success)mstore(0x54a0, 0x223de03d896b802bcaafe01dad031c693d8ae076ae851cb7afe988a1c0065d00)                    mstore(0x54c0, 0x19c5c537ceec5b4f42ceba1e313a4c1c461425f3ed3931fcf29a36335468a173)mstore(0x54e0, mload(0x4100))success := and(eq(staticcall(gas(), 0x7, 0x54a0, 0x60, 0x54a0, 0x40), 1), success)mstore(0x5500, mload(0x5420))                    mstore(0x5520, mload(0x5440))mstore(0x5540, mload(0x54a0))                    mstore(0x5560, mload(0x54c0))success := and(eq(staticcall(gas(), 0x6, 0x5500, 0x80, 0x5500, 0x40), 1), success)mstore(0x5580, 0x29d2aaacc7e23089bb39538a6cc72e54df0b92e648bbfd7b66d251b7b260cc99)                    mstore(0x55a0, 0x2f4574ff0d452749443728b2f57f035aacde4cc53c5f9a36b603f1942ecb1c86)mstore(0x55c0, mload(0x4120))success := and(eq(staticcall(gas(), 0x7, 0x5580, 0x60, 0x5580, 0x40), 1), success)mstore(0x55e0, mload(0x5500))                    mstore(0x5600, mload(0x5520))mstore(0x5620, mload(0x5580))                    mstore(0x5640, mload(0x55a0))success := and(eq(staticcall(gas(), 0x6, 0x55e0, 0x80, 0x55e0, 0x40), 1), success)mstore(0x5660, 0x062ab1adb3c9f3a35ab9bdc5786148e47c05370b824b9c204c5756eb81d9ea4c)                    mstore(0x5680, 0x2214b90dea0f26085e3f0109ad3e1e4e2af273bf128f6ae0cd770bb332aab48e)mstore(0x56a0, mload(0x4140))success := and(eq(staticcall(gas(), 0x7, 0x5660, 0x60, 0x5660, 0x40), 1), success)mstore(0x56c0, mload(0x55e0))                    mstore(0x56e0, mload(0x5600))mstore(0x5700, mload(0x5660))                    mstore(0x5720, mload(0x5680))success := and(eq(staticcall(gas(), 0x6, 0x56c0, 0x80, 0x56c0, 0x40), 1), success)mstore(0x5740, 0x0659078b9c6160b92e6eff67e386ec1e83168a512cdf07553b40016b5c3e4b59)                    mstore(0x5760, 0x2634dc72ea2c8a8e44a9de01d1f6dfca1485370659ec15f362d5ac2ca9c24a02)mstore(0x5780, mload(0x4160))success := and(eq(staticcall(gas(), 0x7, 0x5740, 0x60, 0x5740, 0x40), 1), success)mstore(0x57a0, mload(0x56c0))                    mstore(0x57c0, mload(0x56e0))mstore(0x57e0, mload(0x5740))                    mstore(0x5800, mload(0x5760))success := and(eq(staticcall(gas(), 0x6, 0x57a0, 0x80, 0x57a0, 0x40), 1), success)mstore(0x5820, 0x144150ade3d8b319671e9c06d3ccc0925b34e1700f7dce24a8c1d6ded13502b9)                    mstore(0x5840, 0x27fb18ec5aa31dac9986f31c30dc152a2d2c1ed343a2ffca9b87db8dce1a18d9)mstore(0x5860, mload(0x4180))success := and(eq(staticcall(gas(), 0x7, 0x5820, 0x60, 0x5820, 0x40), 1), success)mstore(0x5880, mload(0x57a0))                    mstore(0x58a0, mload(0x57c0))mstore(0x58c0, mload(0x5820))                    mstore(0x58e0, mload(0x5840))success := and(eq(staticcall(gas(), 0x6, 0x5880, 0x80, 0x5880, 0x40), 1), success)mstore(0x5900, 0x1dd726222816a2479145344986ad7a8e1b97a48f58ec1e4f2e155c6d4c7cbdd6)                    mstore(0x5920, 0x0350d3bf49e48012f09345025ee1bd00a040b9c684dbc317d2b72c343a0693de)mstore(0x5940, mload(0x41a0))success := and(eq(staticcall(gas(), 0x7, 0x5900, 0x60, 0x5900, 0x40), 1), success)mstore(0x5960, mload(0x5880))                    mstore(0x5980, mload(0x58a0))mstore(0x59a0, mload(0x5900))                    mstore(0x59c0, mload(0x5920))success := and(eq(staticcall(gas(), 0x6, 0x5960, 0x80, 0x5960, 0x40), 1), success)mstore(0x59e0, 0x29c3fb2b5f5d0f2c536d334426769c2d581278cb3237c6a5fb45938f8fba4395)                    mstore(0x5a00, 0x2741f81bc65a229f1e846c1fecbc4371ce1ff60b69a2139cb1c0ad71a1d39081)mstore(0x5a20, mload(0x41c0))success := and(eq(staticcall(gas(), 0x7, 0x59e0, 0x60, 0x59e0, 0x40), 1), success)mstore(0x5a40, mload(0x5960))                    mstore(0x5a60, mload(0x5980))mstore(0x5a80, mload(0x59e0))                    mstore(0x5aa0, mload(0x5a00))success := and(eq(staticcall(gas(), 0x6, 0x5a40, 0x80, 0x5a40, 0x40), 1), success)mstore(0x5ac0, 0x27b7c6872d9ed9a1cf0a2219eac23c5bad4423e2bf85f5aa3f2ec4d75412274f)                    mstore(0x5ae0, 0x2dc1d66efb6f56c4902a351df173c5d7e953400ec50e1094eca280894ec82ba3)mstore(0x5b00, mload(0x41e0))success := and(eq(staticcall(gas(), 0x7, 0x5ac0, 0x60, 0x5ac0, 0x40), 1), success)mstore(0x5b20, mload(0x5a40))                    mstore(0x5b40, mload(0x5a60))mstore(0x5b60, mload(0x5ac0))                    mstore(0x5b80, mload(0x5ae0))success := and(eq(staticcall(gas(), 0x6, 0x5b20, 0x80, 0x5b20, 0x40), 1), success)mstore(0x5ba0, 0x11cffed831df49d5a8e69db1c295082692a63ea86a64298d22fa823acb7e8939)                    mstore(0x5bc0, 0x2735d2e0a26797f89869f1868dd11a3ad84ea6e1f878bcc9a9ec53a3686671f7)mstore(0x5be0, mload(0x4200))success := and(eq(staticcall(gas(), 0x7, 0x5ba0, 0x60, 0x5ba0, 0x40), 1), success)mstore(0x5c00, mload(0x5b20))                    mstore(0x5c20, mload(0x5b40))mstore(0x5c40, mload(0x5ba0))                    mstore(0x5c60, mload(0x5bc0))success := and(eq(staticcall(gas(), 0x6, 0x5c00, 0x80, 0x5c00, 0x40), 1), success)mstore(0x5c80, 0x130ff613542fe093d4efd58fdf9312c4c6f3a0e0e2745ad0e7d3e27fb74b4ccd)                    mstore(0x5ca0, 0x1b53660666b8ccc9eca46b804691b1b677209261f0962cbb6d5abe3a513cdc25)mstore(0x5cc0, mload(0x4220))success := and(eq(staticcall(gas(), 0x7, 0x5c80, 0x60, 0x5c80, 0x40), 1), success)mstore(0x5ce0, mload(0x5c00))                    mstore(0x5d00, mload(0x5c20))mstore(0x5d20, mload(0x5c80))                    mstore(0x5d40, mload(0x5ca0))success := and(eq(staticcall(gas(), 0x6, 0x5ce0, 0x80, 0x5ce0, 0x40), 1), success)mstore(0x5d60, 0x1b5c690b3a365e1569e4c1b4ffba2ae39d18867c5d10add695dabdc42ec8c6d3)                    mstore(0x5d80, 0x12a0b02df9a69182640c2776548b2318252c73346ac7793799c1694931a4a1c9)mstore(0x5da0, mload(0x4240))success := and(eq(staticcall(gas(), 0x7, 0x5d60, 0x60, 0x5d60, 0x40), 1), success)mstore(0x5dc0, mload(0x5ce0))                    mstore(0x5de0, mload(0x5d00))mstore(0x5e00, mload(0x5d60))                    mstore(0x5e20, mload(0x5d80))success := and(eq(staticcall(gas(), 0x6, 0x5dc0, 0x80, 0x5dc0, 0x40), 1), success)mstore(0x5e40, mload(0x540))                    mstore(0x5e60, mload(0x560))mstore(0x5e80, mload(0x4260))success := and(eq(staticcall(gas(), 0x7, 0x5e40, 0x60, 0x5e40, 0x40), 1), success)mstore(0x5ea0, mload(0x5dc0))                    mstore(0x5ec0, mload(0x5de0))mstore(0x5ee0, mload(0x5e40))                    mstore(0x5f00, mload(0x5e60))success := and(eq(staticcall(gas(), 0x6, 0x5ea0, 0x80, 0x5ea0, 0x40), 1), success)mstore(0x5f20, mload(0x580))                    mstore(0x5f40, mload(0x5a0))mstore(0x5f60, mload(0x4280))success := and(eq(staticcall(gas(), 0x7, 0x5f20, 0x60, 0x5f20, 0x40), 1), success)mstore(0x5f80, mload(0x5ea0))                    mstore(0x5fa0, mload(0x5ec0))mstore(0x5fc0, mload(0x5f20))                    mstore(0x5fe0, mload(0x5f40))success := and(eq(staticcall(gas(), 0x6, 0x5f80, 0x80, 0x5f80, 0x40), 1), success)mstore(0x6000, mload(0x5c0))                    mstore(0x6020, mload(0x5e0))mstore(0x6040, mload(0x42a0))success := and(eq(staticcall(gas(), 0x7, 0x6000, 0x60, 0x6000, 0x40), 1), success)mstore(0x6060, mload(0x5f80))                    mstore(0x6080, mload(0x5fa0))mstore(0x60a0, mload(0x6000))                    mstore(0x60c0, mload(0x6020))success := and(eq(staticcall(gas(), 0x6, 0x6060, 0x80, 0x6060, 0x40), 1), success)mstore(0x60e0, mload(0x600))                    mstore(0x6100, mload(0x620))mstore(0x6120, mload(0x42c0))success := and(eq(staticcall(gas(), 0x7, 0x60e0, 0x60, 0x60e0, 0x40), 1), success)mstore(0x6140, mload(0x6060))                    mstore(0x6160, mload(0x6080))mstore(0x6180, mload(0x60e0))                    mstore(0x61a0, mload(0x6100))success := and(eq(staticcall(gas(), 0x6, 0x6140, 0x80, 0x6140, 0x40), 1), success)mstore(0x61c0, mload(0x4a0))                    mstore(0x61e0, mload(0x4c0))mstore(0x6200, mload(0x42e0))success := and(eq(staticcall(gas(), 0x7, 0x61c0, 0x60, 0x61c0, 0x40), 1), success)mstore(0x6220, mload(0x6140))                    mstore(0x6240, mload(0x6160))mstore(0x6260, mload(0x61c0))                    mstore(0x6280, mload(0x61e0))success := and(eq(staticcall(gas(), 0x6, 0x6220, 0x80, 0x6220, 0x40), 1), success)mstore(0x62a0, mload(0xb80))                    mstore(0x62c0, mload(0xba0))mstore(0x62e0, mload(0x4780))success := and(eq(staticcall(gas(), 0x7, 0x62a0, 0x60, 0x62a0, 0x40), 1), success)mstore(0x6300, mload(0x6220))                    mstore(0x6320, mload(0x6240))mstore(0x6340, mload(0x62a0))                    mstore(0x6360, mload(0x62c0))success := and(eq(staticcall(gas(), 0x6, 0x6300, 0x80, 0x6300, 0x40), 1), success)mstore(0x6380, mload(0xbc0))                    mstore(0x63a0, mload(0xbe0))mstore(0x63c0, mload(0x47c0))success := and(eq(staticcall(gas(), 0x7, 0x6380, 0x60, 0x6380, 0x40), 1), success)mstore(0x63e0, mload(0x6300))                    mstore(0x6400, mload(0x6320))mstore(0x6420, mload(0x6380))                    mstore(0x6440, mload(0x63a0))success := and(eq(staticcall(gas(), 0x6, 0x63e0, 0x80, 0x63e0, 0x40), 1), success)mstore(0x6460, mload(0xc00))                    mstore(0x6480, mload(0xc20))mstore(0x64a0, mload(0x4800))success := and(eq(staticcall(gas(), 0x7, 0x6460, 0x60, 0x6460, 0x40), 1), success)mstore(0x64c0, mload(0x63e0))                    mstore(0x64e0, mload(0x6400))mstore(0x6500, mload(0x6460))                    mstore(0x6520, mload(0x6480))success := and(eq(staticcall(gas(), 0x6, 0x64c0, 0x80, 0x64c0, 0x40), 1), success)mstore(0x6540, mload(0xc40))                    mstore(0x6560, mload(0xc60))mstore(0x6580, mload(0x4840))success := and(eq(staticcall(gas(), 0x7, 0x6540, 0x60, 0x6540, 0x40), 1), success)mstore(0x65a0, mload(0x64c0))                    mstore(0x65c0, mload(0x64e0))mstore(0x65e0, mload(0x6540))                    mstore(0x6600, mload(0x6560))success := and(eq(staticcall(gas(), 0x6, 0x65a0, 0x80, 0x65a0, 0x40), 1), success)mstore(0x6620, mload(0xbc0))                    mstore(0x6640, mload(0xbe0))mstore(0x6660, mload(0x43c0))success := and(eq(staticcall(gas(), 0x7, 0x6620, 0x60, 0x6620, 0x40), 1), success)mstore(0x6680, mload(0xb80))                    mstore(0x66a0, mload(0xba0))mstore(0x66c0, mload(0x6620))                    mstore(0x66e0, mload(0x6640))success := and(eq(staticcall(gas(), 0x6, 0x6680, 0x80, 0x6680, 0x40), 1), success)mstore(0x6700, mload(0xc00))                    mstore(0x6720, mload(0xc20))mstore(0x6740, mload(0x45a0))success := and(eq(staticcall(gas(), 0x7, 0x6700, 0x60, 0x6700, 0x40), 1), success)mstore(0x6760, mload(0x6680))                    mstore(0x6780, mload(0x66a0))mstore(0x67a0, mload(0x6700))                    mstore(0x67c0, mload(0x6720))success := and(eq(staticcall(gas(), 0x6, 0x6760, 0x80, 0x6760, 0x40), 1), success)mstore(0x67e0, mload(0xc40))                    mstore(0x6800, mload(0xc60))mstore(0x6820, mload(0x4700))success := and(eq(staticcall(gas(), 0x7, 0x67e0, 0x60, 0x67e0, 0x40), 1), success)mstore(0x6840, mload(0x6760))                    mstore(0x6860, mload(0x6780))mstore(0x6880, mload(0x67e0))                    mstore(0x68a0, mload(0x6800))success := and(eq(staticcall(gas(), 0x6, 0x6840, 0x80, 0x6840, 0x40), 1), success)mstore(0x68c0, mload(0x65a0))                    mstore(0x68e0, mload(0x65c0))mstore(0x6900, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)            mstore(0x6920, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)            mstore(0x6940, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)            mstore(0x6960, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)mstore(0x6980, mload(0x6840))                    mstore(0x69a0, mload(0x6860))mstore(0x69c0, 0x2c34c654fa4a28bcd908615b378376036a3d3c8f09f9dd249694077f694e3c61)            mstore(0x69e0, 0x07d3b286376b1121be8821fad73c8938f41f60675a3d31049c55d7320a30a784)            mstore(0x6a00, 0x2c137b8b0b90ef151cc0bfc8b9d41d723499725a55166cbc9a3dd7968ef43e69)            mstore(0x6a20, 0x2b71481505ac252044be2ae099344b727b40f15a967612067be0ef19a8b4822c)success := and(eq(staticcall(gas(), 0x8, 0x68c0, 0x180, 0x68c0, 0x20), 1), success)success := and(eq(mload(0x68c0), 1), success)} return success; } }
